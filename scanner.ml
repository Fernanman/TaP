# 3 "scanner.mll"
  open Parser 
# 4 "scanner.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\234\255\235\255\078\000\153\000\238\255\012\000\020\000\
    \241\255\001\000\002\000\245\255\246\255\247\255\248\255\249\255\
    \250\255\251\255\252\255\253\255\002\000\254\255\003\000\243\255\
    \242\255\240\255\239\255\017\000\254\255\017\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\019\000\018\000\255\255\021\000\021\000\
    \255\255\021\000\011\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\021\000\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\001\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \000\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\028\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\021\000\000\000\022\000\022\000\000\000\000\000\
    \022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \022\000\009\000\021\000\022\000\000\000\000\000\007\000\005\000\
    \019\000\018\000\012\000\014\000\015\000\013\000\020\000\011\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\025\000\029\000\008\000\010\000\024\000\023\000\
    \030\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\017\000\006\000\016\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \026\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\022\000\000\000\255\255\255\255\
    \022\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\020\000\022\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\007\000\027\000\000\000\000\000\009\000\010\000\
    \029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \006\000\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\027\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 16 "scanner.mll"
             ( token lexbuf )
# 148 "scanner.ml"

  | 1 ->
# 17 "scanner.mll"
                        ( NL )
# 153 "scanner.ml"

  | 2 ->
# 18 "scanner.mll"
           ( LPAREN )
# 158 "scanner.ml"

  | 3 ->
# 19 "scanner.mll"
           ( RPAREN )
# 163 "scanner.ml"

  | 4 ->
# 20 "scanner.mll"
           ( LBRACE )
# 168 "scanner.ml"

  | 5 ->
# 21 "scanner.mll"
           ( RBRACE )
# 173 "scanner.ml"

  | 6 ->
# 22 "scanner.mll"
           ( COMMA )
# 178 "scanner.ml"

  | 7 ->
# 23 "scanner.mll"
           ( PLUS )
# 183 "scanner.ml"

  | 8 ->
# 24 "scanner.mll"
           ( MINUS )
# 188 "scanner.ml"

  | 9 ->
# 25 "scanner.mll"
           ( TIMES )
# 193 "scanner.ml"

  | 10 ->
# 26 "scanner.mll"
           ( DIVIDE )
# 198 "scanner.ml"

  | 11 ->
# 27 "scanner.mll"
           ( ASSIGN )
# 203 "scanner.ml"

  | 12 ->
# 28 "scanner.mll"
           ( EQ )
# 208 "scanner.ml"

  | 13 ->
# 29 "scanner.mll"
           ( NEQ )
# 213 "scanner.ml"

  | 14 ->
# 30 "scanner.mll"
           ( LT )
# 218 "scanner.ml"

  | 15 ->
# 31 "scanner.mll"
           ( AND )
# 223 "scanner.ml"

  | 16 ->
# 32 "scanner.mll"
           ( OR )
# 228 "scanner.ml"

  | 17 ->
# 33 "scanner.mll"
           ( QUOTE )
# 233 "scanner.ml"

  | 18 ->
let
# 35 "scanner.mll"
             lem
# 239 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 35 "scanner.mll"
                  ( INT_LIT(int_of_string lem) )
# 243 "scanner.ml"

  | 19 ->
let
# 38 "scanner.mll"
                lem
# 249 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 38 "scanner.mll"
                    ( 
    let standard_id = String.lowercase_ascii lem in
    match standard_id with
    | "true" -> BOOL_LIT(true)
    | "false" -> BOOL_LIT(false)
    | "plus" -> PLUS
    | "minus" -> MINUS
    | "mult" -> TIMES
    | "div" -> DIVIDE
    | "mod" -> MOD
    | "is" -> ASSIGN
    | "if" -> IF
    | "else" -> ELSE
    | "for" -> FOR
    | "while" -> WHILE
    | "fun" -> FUN
    | "end" -> END
    | "break" -> BREAK
    | "cont" -> CONT
    | "free" -> FREE
    | "null" -> NULL
    | "at" -> AT
    | "class" -> CLASS
    | "and" -> AND
    | "or" -> OR
    | "not" -> NOT
    | "list" -> LIST
    | "equals" -> EQ
    | "lt" -> LT
    | "gt" -> GT
    | "leq" -> LEQ
    | "geq" -> GEQ
    | "in" -> IN
    | "as" -> AS
    | "string" -> STRING
    | "boolean" -> BOOLEAN
    | "map" -> MAP
    | "set" -> SET
    | "array" -> ARRAY
    | "number" -> NUMBER
    | "to" -> TO
    | _ -> IDENTIFIER(standard_id) 
 )
# 295 "scanner.ml"

  | 20 ->
# 81 "scanner.mll"
      ( EOF )
# 300 "scanner.ml"

  | 21 ->
let
# 82 "scanner.mll"
       char
# 306 "scanner.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 82 "scanner.mll"
            ( raise (Failure("illegal character " ^ Char.escaped char)) )
# 310 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 27
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 85 "scanner.mll"
       ( token lexbuf )
# 322 "scanner.ml"

  | 1 ->
# 86 "scanner.mll"
       ( comment lexbuf )
# 327 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

